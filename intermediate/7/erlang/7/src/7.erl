%%%-------------------------------------------------------------------
%%% @author kim <kim@limmen>
%%% @copyright (C) 2016, kim
%%% @doc
%%% Challenge 7 Intermediate
%%% Write a program that draws a recursive image.
%%% For example, a Sierpinski triangle, a Barnsley fern, or a Mandelbrot set fractal would be good drawings.
%%% Any recursive image will do, but try to make them look fun or interesting.
%%% Bonus points for adding a color scheme!
%%% Please post a link to a sample image produced by your program, and above all, be creative.
%%%
%%% @end
%%% Created : 26 Jul 2016 by kim <kim@limmen>
%%%-------------------------------------------------------------------
-module('7').

%% API
-export([challenge/0]).

%%%===================================================================
%%% API
%%%===================================================================

%%--------------------------------------------------------------------
%% @doc
%% @spec
%% @end
%%--------------------------------------------------------------------
challenge()->
    init("images/dailyprogrammer_challenge_intermediate_7.ppm", 600, 400, -2.6, 1.2, 0.004, 64).

%%%===================================================================
%%% Internal functions
%%%===================================================================

init(File, Width, Height, X, Y, K, Depth) ->
    {ok, Fd} = file:open(File, [write]),
    io:format(Fd, "P6~n", []),
    io:format(Fd, "#~s~n", ["generated by ppm.erl"]),
    io:format(Fd, "~w ~w~n", [Width, Height]),
    io:format(Fd, "255~n", []),
    rows(Width, Height,{trans,X,Y,K},Depth,Fd),
    io:format("image ~s printed~n", [File]),
    file:close(Fd).

rows( _, 0, _, _, _)->
    io:format("done~n", []);

rows(W, H, {trans, X, Y, K}, Depth, Fd) ->
    Tr = fun(A, B) -> {X + K*(A-1), Y-K*(B-1)} end,
    Row = row(W, H, Tr, Depth, []),
    Chars = row(Row), 
    io:put_chars(Fd, Chars),
    io:format("row done, rows left: ~p ~n", [H]),
    rows(W, H-1,{trans,X,Y,K},Depth,Fd).

row(Row) ->
    lists:foldr(fun({R,G,B}, A) -> 
                        [R, G, B | A] end, 
                [], Row).   

row(0, _, _, _, Row) ->
    Row;
row(W, H, Tr, Depth, Row) ->
    {X,Y} = Tr(W,H),
    C = cmplx:new(X,Y),
    Res =  brot:mandelbrot(C, Depth),
    Color = color:convert(Res, Depth),
    row(W-1, H, Tr, Depth, [Color|Row]).

